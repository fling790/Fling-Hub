local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Notifications for Fling Hub
game.StarterGui:SetCore("SendNotification", {
    Title = "Fling Hub",
    Text = "We Made A Build In Executor In The Script!",
    Duration = 5
})

game.StarterGui:SetCore("SendNotification", {
    Title = "Fling Hub",
    Text = "Btw The Key Changes Every 24 Hours. Join the Discord Server if you can't find it.",
    Duration = 5
})

-- Initialize the Fling Hub window
local Window = Rayfield:CreateWindow({
    Name = "Fling Hub | Universal",
    LoadingTitle = "Version 4 Is Out!",
    LoadingSubtitle = "by Fling",
    ConfigurationSaving = {
        Enabled = false,
        FolderName = nil,
        FileName = "Fling Hub"
    },
    Discord = {
        Enabled = true,
        Invite = "qTRxkP8K",
        RememberJoins = true
    },
    KeySystem = true,
    KeySettings = {
        Title = "Get Key",
        Subtitle = "Key System",
        Note = "Key In Discord Server",
        FileName = "YoutubeHubKey1",
        SaveKey = false,
        GrabKeyFromSite = true,
        Key = {"https://raw.githubusercontent.com/fling790/fling-hub-key/refs/heads/main/fling%20key"}
    }
})

-- Create the Visual Tab (This tab will always be visible)
local VisualTab = Window:CreateTab("Visual", nil)
local MainSection = VisualTab:CreateSection("Main")

-- Add buttons to the Visual Tab (Buttons for visual adjustments, etc.)
VisualTab:CreateButton({
    Name = "Fake WallHop (Infinite Jump)",
    Callback = function()
        _G.infinjump = not _G.infinjump
        if _G.infinJumpStarted == nil then
            _G.infinJumpStarted = true
            game.StarterGui:SetCore("SendNotification", {
                Title = "Fling Hub",
                Text = "Wall Hop Activated ig",
                Duration = 5
            })

            local UserInputService = game:GetService("UserInputService")
            UserInputService.InputBegan:Connect(function(input, isProcessed)
                if not isProcessed and _G.infinjump then
                    if input.KeyCode == Enum.KeyCode.Space then
                        local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                            task.wait()
                            humanoid:ChangeState(Enum.HumanoidStateType.Seated)
                        end
                    end
                end
            end)
        end
    end
})

VisualTab:CreateSlider({
    Name = "WalkSpeed Slider",
    Range = {16, 350},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 16,
    Flag = "sliderws",
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
    end
})

VisualTab:CreateSlider({
    Name = "JumpPower Slider",
    Range = {1, 350},
    Increment = 1,
    Suffix = "Power",
    CurrentValue = 50,
    Flag = "sliderjp",
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
    end
})

VisualTab:CreateInput({
    Name = "Set WalkSpeed",
    PlaceholderText = "1-500",
    RemoveTextAfterFocusLost = true,
    Callback = function(Text)
        local value = tonumber(Text)
        if value then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
        end
    end
})

-- Function to create the "Supported Games" Tab and Display Supported Games List
local function createSupportedGamesTab()
    local supportedGames = {
        {Name = "Just a Baseplate", GameId = 17574618959},
        {Name = "Da Hood", GameId = 2788229376},
        {Name = "Grow A Garden", GameId = 126884695634066},
        {Name = "Dead Rails", GameId = 116495829188952},
        {Name = "Speed Hub X", GameId = 126884695634066}
    }

    -- Create Supported Games Tab
    local SupportedGamesTab = Window:CreateTab("Supported Games", nil)

    -- Create a list of supported games
    local supportedGamesText = "Supported Games:\n\n"
    for _, game in pairs(supportedGames) do
        supportedGamesText = supportedGamesText .. game.Name .. " (Game ID: " .. game.GameId .. ")\n"
    end

    -- Add a paragraph to display the supported games list
    SupportedGamesTab:CreateParagraph({
        Title = "List of Supported Games",
        Content = supportedGamesText
    })
end

-- Create a custom tab for each supported game
local function createGameTab(gameName, gameId, buttonName, scriptUrl)
    local gameTab = Window:CreateTab(gameName, nil)

    gameTab:CreateParagraph({
        Title = "Welcome to " .. gameName .. "!",
        Content = "Enjoy the features of " .. gameName
    })

    -- Create the button to execute the script for that game
    gameTab:CreateButton({
        Name = buttonName,
        Callback = function()
            -- Load the script from the provided URL
            loadstring(game:HttpGet(scriptUrl))()
        end
    })
end

-- Create tabs based on the current game being played (by GameId)
local placeId = game.PlaceId

if placeId == 17574618959 then
    createGameTab("Just a Baseplate", placeId, "Hat Hub", "https://raw.githubusercontent.com/inkdupe/hat-scripts/refs/heads/main/updatedhathub.lua")
elseif placeId == 2788229376 then
    createGameTab("Da Hood", placeId, "Star Hook", "https://raw.githubusercontent.com/linemaster2/storage/main/Drawing.lua")
elseif placeId == 126884695634066 then
    createGameTab("Grow A Garden", placeId, "Speed Hub X", "https://raw.githubusercontent.com/AhmadV99/Speed-Hub-X/main/Speed%20Hub%20X.lua")
elseif placeId == 116495829188952 then
    createGameTab("Dead Rails", placeId, "Auto Bonds", "https://raw.githubusercontent.com/m00ndiety/OP-AUTO-BONDS-V3/refs/heads/main/Keyless-BONDS-v3")
else
    -- If the game is not supported, display "Not Supported Game" tab
    local NotSupportedTab = Window:CreateTab("Not Supported Game", nil)
    NotSupportedTab:CreateParagraph({
        Title = "This game is not supported",
        Content = "This game is not supported by Fling Hub. Please check back later or contact the developer for support."
    })
    
    -- Add Infinite Yield button to unsupported games
    NotSupportedTab:CreateButton({
        Name = "Infinite Yield",
        Callback = function()
            -- Load and run Infinite Yield script
            loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
        end
    })
end

-- Create the "Supported Games" Tab
createSupportedGamesTab()

-- Create the Executor Tab
local ExecutorTab = Window:CreateTab("Executor", nil)
local ExecutorSection = ExecutorTab:CreateSection("Script Executor [Beta]")

-- Add a large input box for script input
ExecutorTab:CreateInput({
    Name = "Paste Script Here",
    PlaceholderText = "Paste any Lua script here...",
    RemoveTextAfterFocusLost = false,
    MultiLine = true,
    Callback = function(scriptCode)
        -- Try to run the user's pasted script
        local success, errorMsg = pcall(function()
            loadstring(scriptCode)()
        end)
        
        if success then
            game.StarterGui:SetCore("SendNotification", {
                Title = "Executor",
                Text = "Script executed successfully!",
                Duration = 5
            })
        else
            game.StarterGui:SetCore("SendNotification", {
                Title = "Executor",
                Text = "Error: " .. errorMsg,
                Duration = 5
            })
        end
    end
})
